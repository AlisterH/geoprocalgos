# -*- coding: utf-8 -*-
"""
/***************************************************************************
 bc----3
                           A QGIS Processing algorithm
                       ----

 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-05-19
        copyright            : (C) 2019 by GeoProc.com
        email                : info@geoproc.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'GeoProc.com'
__date__ = '2019-05-19'
__copyright__ = '(C) 2019 by GeoProc.com'
__revision__ = '$Format:%H$'

import os, codecs
from math import sin, cos, radians, sqrt
try:
    import numpy as np
    import pandas as pd
    is_dependencies_satisfied = True
except:
    is_dependencies_satisfied = False

from qgis.PyQt.QtGui import QIcon
from qgis.core import (QgsProcessingAlgorithm, QgsProcessing,
                       QgsProcessingUtils,
                       QgsProcessingFeatureSource,
                       QgsFields,
                       QgsFeature,
                       QgsGeometry,
                       QgsPoint,
                       QgsLineString,
                       QgsWkbTypes,
                       QgsFeatureRequest,
                       QgsProcessingException,
                       QgsStatisticalSummary,
                       QgsFeatureSink)

from .setparams import set_param

#-----------------------------------------------------------------------------------------
plugin_path = os.path.join(os.path.split(os.path.dirname(__file__))[0], 'geoprocAlgos')

the_url = 'http://www.geoproc.com/free/bc---3.htm'
help_string = """
"""
the_tags = []
#-----------------------------------------------------------------------------------------

class bc---Algorithm(QgsProcessingAlgorithm):
    ''' Processing wrapper. '''
    #
    # Parameters used for stacking profiles
    THE_LAYER = 'THE_LAYER'
    OUTPUT    = 'OUTPUT'

    _default_output = ''

    _the_strings = {"ALGONAME":"----",
                    "ERR":"ERROR",
                    "ERR_DEP":"numpy and pandas are required to run this algorithm",
                    "DEP_LST":"numpy, pandas",
                    "ERR_VECTOR":"ERROR: Input is not a vector!",
                   }

    _pstr = ['Input vector', 
             'Output line vector file', 'Vector files (*.shp)', 'All files (*.*)']

    def __init__(self):
        super().__init__()
    #-------------------------------------------------------------------------------------

    def _define_params(self):
        ''' Define parameters needed. '''
        #
        #       [0] < 100  : "normal" parameter
        # 100 < [0] < 1000 : Advanced Parameter
        #       [0] > 1000 : Output parameter
        self.the_params = {
           self.THE_LAYER:    [1,self._pstr[0],'VectorLayer',
                               {'types':[QgsProcessing.TypeVectorPoint]},False],
           self.FID_FLD:      [2,self._pstr[1],'Field',{'parent':self.THE_LAYER},False],
           self.OFFSET:       [7,self._pstr[6],'NumberD',
                               {'defaultValue':0.,'minValue':-1e5,'maxValue':1e5},True],
           self.JOINL:        [8,self._pstr[7],'Bool',{'defaultValue':False},True],
           self.OUTPUT:       [1001,self._pstr[8],'SINK',
                               {'type':QgsProcessing.TypeVectorLine},True]
        }
        self._err_param = {self.DEP: [1,self._the_strings["ERR_DEP"],'String',
                           {'defaultValue':self._the_strings["DEP_LST"]},False]}
    #-------------------------------------------------------------------------------------

    def initAlgorithm(self, config):
        ''' Here we define the inputs and output of the algorithm. '''
        #
        if is_dependencies_satisfied:
            # Prepare all parameters needed for plotting the colour bar
            self._define_params()
            for param in sorted(self.the_params, key=self.the_params.__getitem__):
                b = self.the_params[param][0]
                qparam = set_param(param, self.the_params)
                if qparam != None:
                    if b < 100:
                        self.addParameter(qparam)
                    elif b < 1000:
                        self.addParameter((qparam))
                    else:
                        self.addParameter(qparam, True)

        else:
            qparam = set_param(self.DEP, self._err_param)
            self.addParameter(qparam)
    #-------------------------------------------------------------------------------------

    def processAlgorithm(self, parameters, context, feedback):
        ''' Here is where the processing itself takes place. '''
        #
        if not is_dependencies_satisfied:
            return {}

        the_layer = self.parameterAsSource(parameters, self.THE_LAYER, context)
        if the_layer is None:
            raise QgsProcessingException(self.invalidSourceError(parameters,
                                                                 self.THE_LAYER))
        #
        fidu_fld = self.parameterAsString(parameters, self.FID_FLD, context)
        data_fld = self.parameterAsString(parameters, self.DATA_FLD, context)
        line_fld = self.parameterAsString(parameters, self.LINE_FLD, context)
        invP = self.parameterAsBool(parameters, self.INVERTP, context)
        scale =  self.parameterAsDouble(parameters, self.SCALE, context)
        offset = self.parameterAsDouble(parameters, self.OFFSET, context)
        join_to_line = self.parameterAsBool(parameters, self.JOINL, context)

        data = the_layer.fields().at(the_layer.fields().lookupField(data_fld))
        fidu = the_layer.fields().at(the_layer.fields().lookupField(fidu_fld))
        if not data.isNumeric() or not fidu.isNumeric():
            raise QgsProcessingException(self.invalidSourceError(parameters,
                                                             self.THE_LAYER))

        line = the_layer.fields().at(the_layer.fields().lookupField(line_fld))
        data_ix = the_layer.fields().lookupField(data_fld)
        line_ix = the_layer.fields().lookupField(line_fld)
        fidu_ix = the_layer.fields().lookupField(fidu_fld)

        # Set output vector layer
        output_wkb = QgsWkbTypes.LineString
        if QgsWkbTypes.hasM(the_layer.wkbType()):
            output_wkb = QgsWkbTypes.addM(output_wkb)
        if QgsWkbTypes.hasZ(the_layer.wkbType()):
            output_wkb = QgsWkbTypes.addZ(output_wkb)

        # Keep line into stacked profile vector
        line_def = the_layer.fields().at(line_ix)
        fields = QgsFields()
        if line_def is not None:
            fields.append(line_def)
        (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT, context, fields,
                                               output_wkb, the_layer.sourceCrs())
        if sink is None:
            raise QgsProcessingException(self.invalidSinkError(parameters, self.OUTPUT))

        # Get the features and fields of interest
        features = the_layer.getFeatures(QgsFeatureRequest().setSubsetOfAttributes(
                       [fidu_ix, line_ix, data_ix]), 
                       QgsProcessingFeatureSource.FlagSkipGeometryValidityChecks)

#...

            #Construct vector layer
            f = QgsFeature()
            f.setAttributes([line,])
            line_pts = [QgsPoint(x,y) for x,y in zip(px, py)]
            if join_to_line:
                # Join profile to its line
                e = len(ar) - 1
                ar0 = [QgsPoint(ar.X[0],ar.Y[0]),]
                ar1 = [QgsPoint(ar.X[e],ar.Y[e]),]
                line_pts = ar0 + line_pts + ar1
            #
            f.setGeometry(QgsGeometry(QgsLineString(line_pts)))
            sink.addFeature(f, QgsFeatureSink.FastInsert)

        return {self.OUTPUT:dest_id}
    #-------------------------------------------------------------------------------------

    def get_error(self):
        ''' Return the error value. '''
        #
        return self.tr(self._error)
    #-------------------------------------------------------------------------------------

    def icon(self):
        ''' Returns a QIcon for the algorithm. '''
        #
        return QIcon(os.path.join(plugin_path, 'res', 'bc---.svg'))
    #-------------------------------------------------------------------------------------

    def svgIconPath(self):
        ''' Returns a path to an SVG version of the algorithm's icon. '''
        #
        return os.path.join(plugin_path, 'res', 'bc---.svg')
    #-------------------------------------------------------------------------------------

    def helpUrl(self):
        ''' Returns a url pointing to the algorithm's help page. '''
        #
        return the_url
    #-------------------------------------------------------------------------------------

    def shortHelpString(self):
        ''' Returns a localised short helper string for the algorithm. '''
        #
        return self.tr(help_string)
    #-------------------------------------------------------------------------------------

    def name(self):
        '''
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        '''
        return 'bc---3'
    #-------------------------------------------------------------------------------------

    def displayName(self):
        '''
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        '''
        return self.tr(self._the_strings["bc---3"])
    #-------------------------------------------------------------------------------------

    def tags(self):
        return self.tr(the_tags)
    #-------------------------------------------------------------------------------------

    def group(self):
        '''
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        '''
        return str(self.groupId()).capitalize()
    #-------------------------------------------------------------------------------------

    def groupId(self):
        '''
        One of: composer, layer, raster, survey, vector
        '''
        return '----'
    #-------------------------------------------------------------------------------------

    def tr(self, string):
        ''' No translation of strings. '''
        #
        return string
    #-------------------------------------------------------------------------------------

    def createInstance(self):
        ''' Creates a new instance of the algorithm class. '''
        #
        return bc---Algorithm()
    #-------------------------------------------------------------------------------------